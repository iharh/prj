import org.apache.tools.ant.filters.*

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    ext {
        springBootVersion = '2.2.2.RELEASE'
        set('springCloudVersion', 'Hoxton.RELEASE')
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'

}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    compileOnly "org.projectlombok:lombok"

    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-web"

    implementation "org.springframework.cloud:spring-cloud-starter-oauth2"

    // implementation("org.springframework.boot:spring-boot-starter-oauth2-client")
    implementation("org.apache.httpcomponents:httpclient:4.5.10")

    // test
    testImplementation  'org.springframework.boot:spring-boot-starter-test'

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.5.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.5.1")
}

dependencyManagement {
    // applyMavenExclusions false
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}" // {
            // bomProperty("spring-security-oauth2-autoconfigure.version", "2.2.1.RELEASE")
        // }
    }
    dependencies {
        dependency "org.projectlombok:lombok:1.18.10"
    }
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava.options.encoding = 'UTF-8'

test {
    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
        showStandardStreams true
    }
}

processResources {
    filesMatching('**/bootstrap.yml') {
       filter(ReplaceTokens, tokens: [version: project.version])
   }
}
