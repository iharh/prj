plugins {
    id 'base'
    id 'c'
}

model {
    buildTypes {
        release
    }

    toolChains {
        visualCpp(VisualCpp) {
            //installDir "${project.'vs.base'}"
        }
        gcc(Gcc)
    }

    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    binaries {
        withType(SharedLibraryBinarySpec) { // all
            // cppCompiler.define "NDEBUG"
            // Define toolchain-specific compiler and linker options
            if (toolChain in Gcc) {
                println 'toolchain is Gcc!'
                // "-O2", "-fno-access-control"
                cppCompiler.args '-std=c++0x', '-Wno-narrowing'
            }
            if (toolChain in VisualCpp) {
                // #if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
                cCompiler.define "__STDC_VERSION__=199901L"
                cCompiler.define "YY_NO_UNISTD_H"
                cCompiler.define "DLL_BLD"
                println 'toolchain is VisualCpp!'
            }
        }
    }

    components {
 	smallrt(NativeLibrarySpec) { // SharedLibraryBinarySpec
            targetPlatform 'x64'
            sources {
                c {
                    source {
                        srcDirs 'src/main/c/smallrt'
                        include "**/*.c"
                    }
                    exportedHeaders {
                        srcDirs 'src/main/c/smallrt'
                    }
                }
            }
        }
 	s1(NativeExecutableSpec) { // SharedLibraryBinarySpec
            targetPlatform 'x64'
            sources {
                c {
                    source {
                        srcDirs 'src/main/c/s1'
                        include '*.c'
                    }
                    lib library: "smallrt"
                }
            }
        }
        all {
            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
            binaries.withType(SharedLibraryBinarySpec) {
                //if (toolChain in VisualCpp) {
                    //cCompiler.args '/MT'
                    //linker.args '/MT'
                //} 
            }
        }
    }
}

//FOMAOBJS = foma.o stack.o iface.o lex.interface.o
//LIBOBJS = int_stack.o define.o determinize.o
//apply.o // called from iface.c
//lexcread.o topsort.o flags.o minimize.o reverse.o extract.o sigma.o io.o structures.o constructions.o coaccessible.o utf8.o spelling.o dynarray.o mem.o stringhash.o trie.o
//lex.lexc.o lex.yy.o lex.cmatrix.o regex.o

//not needed: 'rewrite.c'
