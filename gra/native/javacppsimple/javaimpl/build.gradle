plugins {
    id 'java'
}

apply from: "$gradleRootDir/repositories.gradle"
apply from: "$gradleRootDir/dependencies.gradle"
apply from: "$gradleRootDir/junit.gradle"
apply from: "$gradleDir/native.gradle"

ext {
    nativeProviderPrj = project(':jniSimpleProviderLib')
    nativeProviderBuildDir = nativeProviderPrj.buildDir

    nativeProviderLibDir = "$nativeProviderBuildDir/lib/main/debug"
    nativeProviderBuildTasks = nativeProviderPrj.getTasksByName('assembleDebug', false)
}

dependencies {
    compileOnly javaNativeApiPrj
    //testCompileOnly javaNativeApiPrj -> leads to ClassNotFoundException
    testImplementation javaNativeApiPrj

    // javacpp
    compile     libraries.javacpp

    // junit
    testCompile libraries.junit_jupiter_api
    testCompile libraries.junit_jupiter_params
    testRuntime libraries.junit_jupiter_engine
    // assertj
    testCompile libraries.commons_io
    testCompile libraries.assertj_core
}

sourceSets {
    main {
        resources {
            srcDirs += [nativeProviderLibDir] // TODO: executed early at the config-stage !!!
        }
    }
}

jar {
    dependsOn nativeProviderBuildTasks
    from (nativeProviderLibDir) {
        into ("blabla")
    }
    eachFile { details ->
        println "!!! add details.path = $details.path"
    }
    doLast {
        // sleep(3 * 1000)
        println "!!! include the following shared libs as resources:"
        (new File(nativeProviderLibDir)).eachFileRecurse (groovy.io.FileType.FILES) { println it.canonicalPath }
        copy {
            from nativeProviderLibDir
            into "${buildDir}/resources/main"
        }
    }
}

test {
    dependsOn nativeProviderBuildTasks
    def testJavaCP = [nativeProviderLibDir].join(File.pathSeparator)

    systemProperty 'java.library.path', testJavaCP
    systemProperty 'org.bytedeco.javacpp.logger.debug', 'true'

    environment = [ 'LD_LIBRARY_PATH' : testJavaCP ]
}
