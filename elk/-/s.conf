input { 
 file {
  
 path => "//<host>/c$/<path>"

  start_position => beginning
 }
}

filter {

	mutate {
		add_field => { "type" => "server" }
		add_field => { "server" => "%{path}" }
	}

	mutate {
		gsub => [
			"server", "//(.*)\/c\$.*$", "\1"
		]
	}
	
	mutate {	
		replace => [ 
			"host", "%{server}"
		]	
	}

	if ([type] =~ /realtime/) or ([type] =~ /reports/) or ([type] =~ /server/){
		multiline {
			pattern => "^%{TIMESTAMP_ISO8601}"
			negate => true
			what => previous
		}
	}
	
	mutate 	{
		gsub => ["message", "\n", "LINE_BREAK"]
	}

	if ([type] =~ /localhost/) {
		grok {
			match => [ "message", "%{IP:ip}.*\[%{HTTPDATE:httpdate}\].*%{QUOTEDSTRING:quotedstring} %{NUMBER:rc} %{NUMBER:length} %{NUMBER:ms}" ]
			match => [ "message", "%{IP:ip}.*\[%{HTTPDATE:httpdate}\].*%{QUOTEDSTRING:quotedstring} %{NUMBER:rc} - %{NUMBER:ms}" ]		
		}
		
		mutate {
			convert => [ "rc", "integer" ]
			convert => [ "length", "integer" ]
			convert => [ "ms", "integer" ]
			
			gsub => [
				"httpdate", "(.*) -\d\d\d\d", "\1"  #remove time zone e.g. "-0600"
			]		
		}	
	}
	
	if ([type] =~ /realtime/) {
		grok {
			match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:priority}.*Document size: %{NUMBER:docsize}" ]
			match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:priority}.*Timings fx: %{NUMBER:fx}, class %{NUMBER:class}, sent %{NUMBER:sent}, pack %{NUMBER:pack}, alert %{NUMBER:alert}, indexing %{NUMBER:indexing}, dupDetect %{NUMBER:dupDetect}" ]
			match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:priority}.*Timings fx: %{NUMBER:fx} class %{NUMBER:class}, sent %{NUMBER:sent}, pack %{NUMBER:pack}, alert %{NUMBER:alert}, indexing %{NUMBER:indexing}" ]			
			match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:priority}" ]
		}
		
		mutate {
			convert => [ "docsize", "integer" ]
			
			convert => [ "fx", "integer" ]
			convert => [ "class", "integer" ]
			convert => [ "sent", "integer" ]
			convert => [ "pack", "integer" ]
			convert => [ "alert", "integer" ]
			convert => [ "indexing", "integer" ]
			convert => [ "dupDetect", "integer" ]		
		}		
	}	

	if ([type] =~ /reports/) {
		grok {
			match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:priority}.*\[Proj %{NUMBER:proj}\].*\[report: %{NUMBER:report}\].*completed in %{NUMBER:completedms}.*SequenceItem \[type=%{USERNAME:sequenceitemtype}.*is for API = %{USERNAME:isforAPI}" ]		
			match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:priority}" ]
		}
		
		mutate {
			convert => [ "completedms", "integer" ]
		}		
	}	

	if ([type] =~ /server/) {
		grok {
			match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:priority}.*\[Proj %{NUMBER:proj}\]\[Model %{NUMBER:model}\]\[Session %{NUMBER:session}\].*KwClassification\] \[%{NUMBER:shard}\].*\[%{NUMBER:catid}, \"%{USERNAME:catname}\"\]" ]		
			match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:priority}.*\[Proj %{NUMBER:proj}\]\[Model %{NUMBER:model}\]\[Session %{NUMBER:session}\].*KwClassification\] \[%{NUMBER:shard}\].*time\(ms\): %{NUMBER:timems}; cpu\(ms\): %{NUMBER:cpums}\] %{NUMBER:sentences} sentences" ]				
			match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:priority}" ]
		}
		
		mutate {
			convert => [ "sentences", "integer" ]
			convert => [ "cpums", "integer" ]
			convert => [ "timems", "integer" ]		
		}
	}	
	

	date {
		match => [ "httpdate", "dd/MMM/YYYY:HH:mm:ss" ]		
	}	
	
	date {
		match => [ "timestamp", "YYYY-MM-dd HH:mm:ss,SSS" ]		
	}
}
	
output {
	elasticsearch {
	  host => localhost
	  port => "9380"
	  index => "a17-%{+YYYY.MM.dd}"
	}
	stdout { }
}

