buildscript {
    repositories {
        gradlePluginPortal()
    }
    ext {
        springBootVersion = '2.1.3.RELEASE'

        repoRootDir = "${rootProject.getRootDir()}/../.."
        gradleRootDir = "${repoRootDir}/gradle"

        // TODO: move this stuff out to $gradleRootDir
        javaParent = file(System.getProperty("java.home")).getParentFile().getCanonicalFile()
        extractJavaDirForFile = { fileName -> fileTree(javaParent) { include "**/$fileName" }.getAt(0).getParentFile() }

        javaInclude = extractJavaDirForFile('jni.h')
        javaPlatformInclude = extractJavaDirForFile('jni_md.h')
    }

    apply from: "$gradleRootDir/repositories.gradle"
    apply from: "$gradleRootDir/dependencies.gradle"

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath libraries.javacpp
    }
}

plugins {
    id 'java'
    id 'maven-publish'
}

ext {
    javacppGenDir  = "$buildDir/javacpp"
    javacppGenFile = file(javacppGenDir)

    nativeProviderPrj = project(':jniSimpleProviderLib')
    nativeProviderBuildDir = nativeProviderPrj.buildDir

    nativeProviderLibDir = "$nativeProviderBuildDir/lib/main/debug"
    nativeProviderBuildTasks = nativeProviderPrj.getTasksByName('assembleDebug', false)

    javaNativeApiBuildDir = project(':javanativeapi').buildDir
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply from: "$gradleRootDir/repositories.gradle"
apply from: "$gradleRootDir/dependencies.gradle"
apply from: "$gradleRootDir/junit.gradle"
apply from: "$gradleDir/native.gradle"

dependencyManagement {
    applyMavenExclusions false
}

dependencies {
    implementation  javaNativeApiPrj
    //testCompileOnly javaNativeApiPrj -> leads to ClassNotFoundException
    //testImplementation javaNativeApiPrj

    // javacpp
    implementation  libraries.javacpp

    // boot
    compile("org.springframework.boot:spring-boot-starter")

    // junit
    testCompile     libraries.junit_jupiter
    // assertj
    testCompile     libraries.commons_io
    testCompile     libraries.assertj_core
}

def mainClassName = 'simple.SimpleProviderLib'

task generateJavacpp(dependsOn: compileJava) { // compileJava, processResources, classes
    ext.headerDir = javacppGenFile
    ext.sourceDir = javacppGenFile
    doLast {
        new org.bytedeco.javacpp.tools.Builder()
            .classPaths(compileJava.destinationDir.toString())
            .classesOrPackages(mainClassName)
            .outputDirectory(javacppGenDir)
            .deleteJniFiles(false)
            .compile(false)
            .build() // returns the array of produced files
    }
}

bootJar {
    dependsOn nativeProviderBuildTasks
    from (nativeProviderLibDir) {
        into ('simple/linux-x86_64')
    }
    //manifest {
    //    attributes 'Main-Class': 'simple.Main'
    //}
}

test {
    dependsOn nativeProviderBuildTasks
    def testJavaCP = [nativeProviderLibDir].join(File.pathSeparator)

    systemProperty 'java.library.path', testJavaCP
    systemProperty 'org.bytedeco.javacpp.logger.debug', 'true'

    environment = [ 'LD_LIBRARY_PATH' : testJavaCP ]
}
