plugins {
    id 'base'
    //id 'cpp'
    id 'c'
    //id 'maven-publish'
}

import org.gradle.internal.os.OperatingSystem

ext {
    getCurOS = {
        return OperatingSystem.current().isWindows() ? 'windows' : 'linux'
    }
    curOS = getCurOS()
}

def getOSArtifactName(name) {
    def osPref = OperatingSystem.current().isWindows() ? '' : 'lib'
    def osSuf = OperatingSystem.current().isWindows() ? 'windows' : 'linux'
    return "${osPref}${name}-${osSuf}"
}

model {
    buildTypes {
        release
    }

    toolChains {
        visualCpp(VisualCpp) {
            //installDir "${project.'vs.base'}"
        }
        gcc(Gcc)
    }

    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    binaries {
        withType(SharedLibraryBinarySpec) { // all
            cppCompiler.define "NDEBUG"
            // Define toolchain-specific compiler and linker options
            if (toolChain in Gcc) {
                println 'toolchain is Gcc!'
                // "-O2", "-fno-access-control"
                cppCompiler.args '-std=c++0x', '-Wno-narrowing'
            }
            if (toolChain in VisualCpp) {
                cCompiler.define "YY_NO_UNISTD_H"
                println 'toolchain is VisualCpp!'
            }
        }
    }

    components {
 	foma(NativeLibrarySpec) { // SharedLibraryBinarySpec
            targetPlatform 'x64'
            sources {
                c {
                    source {
                        srcDirs 'src/main/c/foma/gen'
                        include 'lex.lexc.c'

                        srcDirs 'src/main/c/foma/foma'
                        //include "**/*.cpp"
                        include 'mem.c'
                        include 'utf8.c'
                        include 'define.c'
                        include 'flags.c'
                        include 'int_stack.c'
                        include 'io.c'
                        include 'structures.c'
                        include 'dynarray.c'
                        include 'constructions.c'
                        include 'rewrite.c'
                        include 'determinize.c'
                        include 'minimize.c'
                        include 'coaccessible.c'
                        include 'topsort.c'
                        include 'sigma.c'
                        include 'miminize.c'
                        include 'lexcread.c'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/c/foma/gen', 'src/main/c/foma/foma'
                    }
                }
            }
        }
        all {
            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
            binaries.withType(SharedLibraryBinarySpec) {
            }
        }
    }
}
