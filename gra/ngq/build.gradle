plugins {
    id 'base'
    id 'cpp'
}
model {
    buildTypes {
        release
    }
    toolChains {
        visualCpp(VisualCpp) {
            // if omitted - the latest version of MSVC will be used
            // !!!uncommend for win!!!
            installDir "${project.'vs.base'}" 
        }
        gcc(Gcc)
    }
    platforms {
        x64 {
            architecture "x86_64"
        }
    }
    binaries {
        withType(SharedLibraryBinarySpec) { // all
            // cppCompiler.define "NDEBUG"
            if (toolChain in Gcc) {
                println 'toolchain is Gcc!'
                // "-O2", "-fno-access-control"
                // cppCompiler.args '-std=c++0x', '-Wno-narrowing'
            }
            if (toolChain in VisualCpp) {
                println 'toolchain is VisualCpp!'
            }
        }
    }
    components {
 	ngq(NativeExecutableSpec) { // SharedLibraryBinarySpec
            targetPlatform 'x64'
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/cpp/ngq'
                        include '*.cpp'
                    }
                }
            }
        }
        all {
            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
        }
    }
}
