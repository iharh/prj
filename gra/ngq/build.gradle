plugins {
    id 'base'
    id 'cpp'
}

import org.gradle.internal.nativeintegration.services.NativeServices;
import org.gradle.internal.os.OperatingSystem

// https://github.com/adammurdoch/native-platform
// nativePlatform: 'net.rubygrapefruit:native-platform:0.14'
// import net.rubygrapefruit.platform.WindowsRegistry
// net.rubygrapefruit.platform.WindowsRegistry wr = net.rubygrapefruit.platform.Native.get(net.rubygrapefruit.platform.WindowsRegistry.class);

//import org.gradle.nativeplatform.toolchain.internal.msvcpp.VisualStudioLocator

//import org.gradle.nativeplatform.toolchain.internal.msvcpp.WindowsSdkLocator

import org.gradle.internal.service.scopes.PluginServiceRegistry

import org.gradle.api.plugins.AppliedPlugin
//import org.gradle.nativeplatform.toolchain.plugins.MicrosoftVisualCppCompilerPlugin

//import org.gradle.nativeplatform.toolchain.VisualCpp


// to fix include order - need windows skd first to successfully being able including "windows.h"
def getExtraSdkDirs() {
    return OperatingSystem.current().isWindows() ? ['C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\shared', "C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um"]
        : [];
}

def getSDKLocator(toolChain) {
    //Memory memory = NativeServices.getInstance().get(Memory.class);
    //WindowsRegistry winreg = NativeServices.getInstance().get(WindowsRegistry.class);
    //WindowsSdkLocator locator = NativeServices.getInstance().get(WindowsSdkLocator.class);
    //VisualStudioLocator visualStudioLocator = NativeServices.getInstance().get(VisualStudioLocator.class);

    //def ppp = NativeServices.getInstance().getAll(PluginServiceRegistry.class) // sessionServices.getAll(PluginServiceRegistry.class)
    //for (PluginServiceRegistry pluginServiceRegistry : ppp) { 
    //    println "abc!!!"
    //}
    //AppliedPlugin p = project.getPluginManager().findPlugin('cpp')
    //MicrosoftVisualCppCompilerPlugin p = project.getPluginManager().getPluginContainer().getPlugin(MicrosoftVisualCppCompilerPlugin.class);
    //def sdkDir = toolChains.getWindowsSdkDir()
    //def sdkDir = ""; 
    // VisualCppToolChain vcpptc = ... getToolChain
    println "getSDKLocator tc: ${toolChain.getClass()}"
    println "getSDKLocator typeName: ${toolChain.typeName}"
    // println "getSDKLocator typeName: ${toolChain.typeName}"
    // public File getWindowsSdkDir() { installDir

    // org.gradle.nativeplatform.toolchain.internal.gcc.GccToolChain_Decorated

    // core/src/main/java/org/gradle/api/internal/AsmBackedClassGenerator.java
    //  core/src/main/java/org/gradle/api/internal/AbstractClassGenerator.java
    //   base-services/src/main/java/org/gradle/internal/reflect/ClassInspector.java
    //   base-services/src/main/java/org/gradle/internal/reflect/PropertyAccessorType.java
    // core/src/test/groovy/org/gradle/api/internal/AsmBackedClassGeneratorTest.java
    // InMemoryDecoratedCache.java InMemoryCacheDecoratorFactory.java
}

model {
    buildTypes {
        release
    }
    toolChains {
        visualCpp(VisualCpp) {
            // if omitted - the latest version of MSVC will be used
            // !!!uncommend for win!!!
            installDir "${project.'vs.base'}" 
            // windowsSdkDir - make ext prop
        }
        gcc(Gcc)
    }
    platforms {
        x64 {
            architecture "x86_64"
        }
    }
    binaries {
        all {
            if (targetPlatform.operatingSystem.windows) {
                println 'platform is win!'
            }
            cppCompiler.define "KENLM_MAX_ORDER=6"
            if (toolChain in VisualCpp) {
                cppCompiler.args "/EHsc"
                println toolChain.windowsSdkDir
            }
            println getSDKLocator(toolChain)
        }
        withType(SharedLibraryBinarySpec) { // all
            if (toolChain in Gcc) {
                println 'toolchain is Gcc!'
                // "-O2", "-fno-access-control"
                // cppCompiler.args '-std=c++0x', '-Wno-narrowing'
            }
            if (toolChain in VisualCpp) {
                // cppCompiler.define "DLL_EXPORT"
                println 'toolchain is VisualCpp!'
            }
        }
    }
    components {
 	ngq(NativeExecutableSpec) { // SharedLibraryBinarySpec
            targetPlatform 'x64'
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/cpp/ngq'
                        include '*.cpp'
                        srcDirs 'src/main/cpp/lm'
                        include '*.cc'
                        srcDirs 'src/main/cpp/util'
                        include '*.cc'
                        srcDirs 'src/main/cpp/util/double-conversion'
                        include '*.cc'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/cpp'
                        srcDirs getExtraSdkDirs()
                    }
                }
            }
        }
        all {
            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
        }
    }
}
