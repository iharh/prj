plugins {
    id 'java'
}

apply from: "$gradleRootDir/repositories.gradle"
apply from: "$gradleRootDir/dependencies.gradle"
apply from: "$gradleRootDir/junit.gradle"
apply from: "$gradleDir/native.gradle"

ext {
    nativeProviderPrj = project(':jniSimpleProviderLib')
    nativeProviderBuildDir = nativeProviderPrj.buildDir

    nativeProviderLibDir = "$nativeProviderBuildDir/lib/main/debug"
    nativeProviderBuildTasks = nativeProviderPrj.getTasksByName('assembleDebug', false)

    javaNativeApiBuildDir = project(':javanativeapi').buildDir
}

dependencies {
    implementation javaNativeApiPrj
    //testCompileOnly javaNativeApiPrj -> leads to ClassNotFoundException
    //testImplementation javaNativeApiPrj

    // javacpp
    compile     libraries.javacpp

    // junit
    testCompile libraries.junit_jupiter_api
    testCompile libraries.junit_jupiter_params
    testRuntime libraries.junit_jupiter_engine
    // assertj
    testCompile libraries.commons_io
    testCompile libraries.assertj_core
}

jar {
    dependsOn nativeProviderBuildTasks
    from (nativeProviderLibDir) {
        into ('simple/linux-x86_64')
    }
    from ("$javaNativeApiBuildDir/classes/java/main")
    manifest {
        attributes 'Main-Class': 'simple.Main'
    }
}

test {
    dependsOn nativeProviderBuildTasks
    def testJavaCP = [nativeProviderLibDir].join(File.pathSeparator)

    systemProperty 'java.library.path', testJavaCP
    systemProperty 'org.bytedeco.javacpp.logger.debug', 'true'

    environment = [ 'LD_LIBRARY_PATH' : testJavaCP ]
}
