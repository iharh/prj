plugins {
    id 'base'
    id 'cpp'
    id 'maven-publish'
}

import org.gradle.internal.os.OperatingSystem

//ext.getCurOS = {
//    return OperatingSystem.current().isWindows() ? 'windows' : 'linux'
//}

ext {
    getCurOS = {
        return OperatingSystem.current().isWindows() ? 'windows' : 'linux'
    }
    curOS = getCurOS()
}

model {
    buildTypes {
        release
    }

    toolChains {
        visualCpp(VisualCpp) {
            //installDir "${project.'vs.base'}"
        }
        gcc(Gcc)
    }

    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    binaries {
        withType(SharedLibraryBinarySpec) { // all
            cppCompiler.define "NDEBUG"
            // Define toolchain-specific compiler and linker options
            if (toolChain in Gcc) {
                println 'toolchain is Gcc!'
                // "-O2", "-fno-access-control"
                cppCompiler.args '-std=c++0x', '-Wno-narrowing'
            }
            if (toolChain in VisualCpp) {
                println 'toolchain is VisualCpp!'
            }
        }
    }

    components {
 	cld2(NativeLibrarySpec) { // SharedLibraryBinarySpec
            targetPlatform 'x64'
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/cpp/cld2/internal'

                        //include "**/*.cpp"
                        include 'debug.cc'

                        include 'generated_ulscript.cc', 'generated_language.cc'

                        include 'lang_script.cc'

                        include 'tote.cc'

                        include 'offsetmap.cc'

                        include 'utf8statetable.cc'

                        include 'cldutil_shared.cc', 'cldutil.cc'

			include 'cld_generated_cjk_delta_bi_32.cc' // _4
			include 'cld2_generated_distinctocta0122.cc'
			include 'cld2_generated_quad0122.cc'
			include 'cld2_generated_deltaocta0122.cc'
			include 'generated_distinct_bi_0.cc'
			include 'cld_generated_score_quad_octa_0122.cc' // _2
			include 'cld_generated_cjk_uni_prop_80.cc'

			include 'cld2_generated_cjk_compatible.cc'

			include 'fixunicodevalue.cc'

			include 'generated_entities.cc'

			include 'getonescriptspan.cc', 'scoreonescriptspan.cc'

                        include 'compact_lang_det_hint_code.cc'

                        include 'compact_lang_det_impl.cc'
                    }
                    exportedHeaders {
                        // 'home/cld/...'
                        srcDirs 'src/main/cpp/cld2/public', 'src/main/cpp/cld2/internal'
                    }
                }
            }
        }
        all {
            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
            binaries.withType(SharedLibraryBinarySpec) {
                // println it.properties it.tasks
                //println it.component.baseName + ' -> ' + it.sharedLibraryFile
                project.repositories.cld2shared.dir(it.sharedLibraryFile.parentFile) // println '-> ' + project.repositories.cld2shared.dirs
                project.publishing.publications.cld2.artifact([source: it.sharedLibraryFile]) // , extension: 'dll'
                //println '-> ' + project.publishing.publications.cld2.properties
                //println '-> ' + project.properties
            }
        }
    }
}

// 23

// 4  cldutil.cc cldutil_shared.cc compact_lang_det.cc compact_lang_det_hint_code.cc \
// 3  compact_lang_det_impl.cc  debug.cc fixunicodevalue.cc \
// 3 generated_entities.cc  generated_language.cc generated_ulscript.cc  \
// 4 getonescriptspan.cc lang_script.cc offsetmap.cc  scoreonescriptspan.cc \
// 2 tote.cc utf8statetable.cc  \
// 2 cld_generated_cjk_uni_prop_80.cc cld2_generated_cjk_compatible.cc  \
// 2 cld_generated_cjk_delta_bi_32.cc generated_distinct_bi_0.cc  \
// 2 cld2_generated_quad0122.cc cld2_generated_deltaocta0122.cc \
// 2 cld2_generated_distinctocta0122.cc  cld_generated_score_quad_octa_0122.cc
// 24

task inst {
}

inst.dependsOn {
    tasks.findAll { task -> task.name.startsWith('install') }
}

repositories {
    flatDir {
        name "cld2shared"
    }
}

publishing {
    publications {
        cld2(MavenPublication) {
            groupId 'clarabridge'
            artifactId name + '-' + curOS // project.publishing.publications.cld2.name, by default - projectName
            //version version // project.version, semver
        }
    }
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            url project.'nexus.repo.snapshots' //"$buildDir/repo"
            credentials {
                username = project.'nexus.deploy.user'
                password = project.'nexus.deploy.password'
            }
        }
    }
}
