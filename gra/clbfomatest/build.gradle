buildscript {
    ext.ver_kotlin = '1.1.2-3' // 1.1.1 1.1.2-3

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$ver_kotlin"
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.1.2' // 1.1.1
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

compileKotlin.kotlinOptions.jvmTarget = '1.8'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
        url project.'nexus.repo'
    }
}

import org.gradle.internal.os.OperatingSystem

ext {
    moduleName = 'clbfoma'
    versions = [
        clbfoma: '1.0.1-dev.2+a518069', // 1.0.0
        kotlintest: '2.0.2'
    ]
    libraries = [
        jnr_ffi:    'com.github.jnr:jnr-ffi:2.1.5',

        //junit:  'junit:junit:4.12',
        kotlintest: "io.kotlintest:kotlintest:${versions.kotlintest}"
    ]
    getCurOS = {
        return OperatingSystem.current().isWindows() ? 'windows' : 'linux'
    }
    curOS = getCurOS()
}

def nativeModuleArtifactName = OperatingSystem.current().isWindows() ? "${moduleName}-windows" : "lib${moduleName}-linux"
def nativeModuleLibDir =  "${libsDir}/${moduleName}/shared"

configurations {
    nativeModuleCfg
}


dependencies {
    nativeModuleCfg "clarabridge:${nativeModuleArtifactName}:${versions.clbfoma}"

    compile libraries.jnr_ffi

    //testCompile libraries.junit // compile
    testCompile libraries.kotlintest
}

configurations.all {
    // https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    //transitive = false
}

test {
    // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html 
    systemProperty 'java.library.path', nativeModuleLibDir
    systemProperty 'jnr.ffi.compile.dump', 'true'
}

task cpNative(type: Copy) {
    shouldRunAfter testClasses
    from (configurations.nativeModuleCfg) {
        rename { filename -> OperatingSystem.current().isWindows() ? "${moduleName}.dll" : "lib${moduleName}.so" }
    }
    into nativeModuleLibDir
}

test.dependsOn cpNative
