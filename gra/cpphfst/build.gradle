plugins {
    id 'base'
    id 'cpp'
}

model {
    buildTypes {
        release
    }

    toolChains {
        visualCpp(VisualCpp) {
            //installDir "${project.'vs.base'}"
        }
        gcc(Gcc)
        //clang(Clang)
    }

    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    binaries {
        all {
            if (targetPlatform.operatingSystem.windows) {
                println 'platform is win!'
            }
            //cppCompiler.define "KENLM_MAX_ORDER=6"
            if (toolChain in VisualCpp) {
                cppCompiler.args "/EHsc"
                println "toolChain.windowsSdkDir: ${toolChain.windowsSdkDir}"
            }
            if (toolChain in Gcc) {
                println 'toolchain is Gcc!'
                cppCompiler.args '-std=c++0x', '-O0', '-g', '-fno-omit-frame-pointer'
                linker.args '-g'
            }
            if (toolChain in Clang) {
                println 'toolchain is Clang!'
                cppCompiler.args '-std=c++0x', '-O0', '-g', '-fsanitize=address', '-fno-omit-frame-pointer'
                linker.args '-g', '-fsanitize=address'
            }
        }
    }

    components {
 	main(NativeExecutableSpec) {
            targetPlatform 'x64'
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/cpp'
                        include '*.cpp'
                        include '*.cc'
                    }
                }
            }
        }
    }
}
