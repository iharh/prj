apply plugin: "cpp"

model {
    buildTypes {
        release
    }
    //repositories {
    //    libs(PrebuiltLibraries) {
    //        scws {
    //            headers.srcDir "/usr/local/include"
    //            binaries.withType(SharedLibraryBinary) {
    //                //sharedLibraryFile = file("/usr/local/lib/libscws.so")
    //                sharedLibraryFile = file("/usr/local/lib/libscws.so.1")
    //            }
    //        }
    //    }
    //}

    binaries {
        all {
            cppCompiler.define "NDEBUG"
            // Define toolchain-specific compiler and linker options
            if (toolChain in Gcc) {
                cppCompiler.args '-std=c++0x' // "-O2", "-fno-access-control"
            }
        }
    }

    components {
 	cld2(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs '/home/cld/cld2/internal'

                        //include "**/*.cpp"
                        include 'debug.cc'

                        include 'generated_ulscript.cc'
                        include 'generated_language.cc'

                        include 'lang_script.cc'

                        include 'tote.cc'

                        include 'offsetmap.cc'

                        include 'utf8statetable.cc'

                        include 'cldutil_shared.cc'
                        include 'cldutil.cc'

			include 'cld_generated_cjk_delta_bi_32.cc' // _4
			include 'cld2_generated_distinctocta0122.cc'
			include 'cld2_generated_quad0122.cc'
			include 'cld2_generated_deltaocta0122.cc'
			include 'generated_distinct_bi_0.cc'
			include 'cld_generated_score_quad_octa_0122.cc' // _2
			include 'cld_generated_cjk_uni_prop_80.cc'

			include 'cld2_generated_cjk_compatible.cc'

			include 'fixunicodevalue.cc'

			include 'generated_entities.cc'

			include 'getonescriptspan.cc'
			include 'scoreonescriptspan.cc'

                        include 'compact_lang_det_hint_code.cc'

                        include 'compact_lang_det_impl.cc'
                    }
                    exportedHeaders {
                        srcDirs '/home/cld/cld2/public', '/home/cld/cld2/internal'
                    }
                }
            }
        }
        cld2cli(NativeExecutableSpec) {
            binaries.all {
                cppCompiler.define 'CSV_IO_NO_THREAD'
            }
            sources {
		cpp.lib library: 'cld2' //, linkage: 'api'
                cpp {
                    source {
                        srcDirs 'src/cld2/cpp'

                        include 'cld2.cc'
                    }
                }
            }
        }
    }
}

// 23

// 4  cldutil.cc cldutil_shared.cc compact_lang_det.cc compact_lang_det_hint_code.cc \
// 3  compact_lang_det_impl.cc  debug.cc fixunicodevalue.cc \
// 3 generated_entities.cc  generated_language.cc generated_ulscript.cc  \
// 4 getonescriptspan.cc lang_script.cc offsetmap.cc  scoreonescriptspan.cc \
// 2 tote.cc utf8statetable.cc  \
// 2 cld_generated_cjk_uni_prop_80.cc cld2_generated_cjk_compatible.cc  \
// 2 cld_generated_cjk_delta_bi_32.cc generated_distinct_bi_0.cc  \
// 2 cld2_generated_quad0122.cc cld2_generated_deltaocta0122.cc \
// 2 cld2_generated_distinctocta0122.cc  cld_generated_score_quad_octa_0122.cc
// 24

task inst {
}

inst.dependsOn {
    tasks.findAll { task -> task.name.startsWith('install') }
}
